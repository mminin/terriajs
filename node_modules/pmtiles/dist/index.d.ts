export declare const shift: (n: number, shift: number) => number;
export declare const unshift: (n: number, shift: number) => number;
export declare const getUint24: (view: DataView, pos: number) => number;
export declare const getUint48: (view: DataView, pos: number) => number;
interface Zxy {
    z: number;
    x: number;
    y: number;
}
interface Header {
    version: number;
    json_size: number;
    root_entries: number;
}
interface Root {
    header: Header;
    buffer: ArrayBuffer;
    dir: DataView;
}
export interface Entry {
    z: number;
    x: number;
    y: number;
    offset: number;
    length: number;
    is_dir: boolean;
}
interface CachedLeaf {
    lastUsed: number;
    buffer: Promise<ArrayBuffer>;
}
export declare const queryLeafdir: (view: DataView, z: number, x: number, y: number) => Entry | null;
export declare const queryTile: (view: DataView, z: number, x: number, y: number) => {
    z: number;
    x: number;
    y: number;
    offset: number;
    length: number;
    is_dir: boolean;
} | null;
export declare const queryLeafLevel: (view: DataView) => number | null;
export declare const parseEntry: (dataview: DataView, i: number) => Entry;
export declare const sortDir: (dataview: DataView) => ArrayBuffer;
export declare const createDirectory: (entries: Entry[]) => ArrayBuffer;
export declare const deriveLeaf: (root: Root, tile: Zxy) => Zxy | null;
export declare const parseHeader: (dataview: DataView) => Header;
export declare class PMTiles {
    root: Promise<Root> | null;
    url: string;
    leaves: Map<number, CachedLeaf>;
    maxLeaves: number;
    constructor(url: string, maxLeaves?: number);
    fetchRoot(url: string): Promise<Root>;
    getRoot(): Promise<Root>;
    metadata(): Promise<any>;
    fetchLeafdir(version: number, entry: Entry): Promise<ArrayBuffer>;
    getLeafdir(version: number, entry: Entry): Promise<ArrayBuffer>;
    getZxy(z: number, x: number, y: number): Promise<Entry | null>;
}
export declare const leafletLayer: (source: PMTiles, options: any) => any;
export declare class ProtocolCache {
    tiles: Map<string, PMTiles>;
    constructor();
    add(p: PMTiles): void;
    get(url: string): PMTiles | undefined;
    protocol: (params: any, callback: any) => {
        cancel: () => void;
    };
}
export {};
