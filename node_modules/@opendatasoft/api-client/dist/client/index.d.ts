import { Query } from '../odsql';
import { ApiResponse } from './types';
export declare type RequestInterceptor = (request: Request) => Promise<Request>;
export declare type ResponseInterceptor = (response: Response) => Promise<ApiResponse>;
export interface ApiClientOptions {
    domain?: string;
    apiKey?: string;
    fetch?: WindowOrWorkerGlobalScope['fetch'];
    interceptRequest?: RequestInterceptor;
    interceptResponse?: ResponseInterceptor;
}
export interface ApiClientConfiguration {
    baseUrl: string;
    apiKey?: string;
    fetch: WindowOrWorkerGlobalScope['fetch'];
    interceptRequest?: RequestInterceptor;
    interceptResponse?: ResponseInterceptor;
}
export declare class ApiClient {
    readonly defaultConfig: ApiClientConfiguration;
    /**
     * Constructs an instance of {@link ApiClient}
     */
    constructor(options?: ApiClientOptions);
    get(query: string | Query, options?: ApiClientOptions): Promise<ApiResponse>;
}
