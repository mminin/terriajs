export declare type StringOrUpdater = string | ((current: string) => string);
export declare type NumberOrUpdater = number | ((current: number) => number);
export declare class Query {
    private readonly params;
    private readonly path;
    private searchParams;
    constructor(path?: string, init?: Record<string, string | string[]>);
    getPath(): string;
    getSearchParams(): URLSearchParams;
    toString(): string;
    set(name: string, value: string | string[]): Query;
    update(name: string, value: StringOrUpdater): Query;
    append(name: string, value: string): Query;
    select(expressions: StringOrUpdater): Query;
    where(filters: StringOrUpdater): Query;
    groupBy(expressions: StringOrUpdater): Query;
    orderBy(expressions: StringOrUpdater): Query;
    limit(limit: NumberOrUpdater): Query;
    offset(offset: NumberOrUpdater): Query;
    facet(facet: string): Query;
    refine(refine: string): Query;
    exclude(exclude: string): Query;
    lang(lang: string): Query;
}
export declare const fromCatalog: () => {
    itself: () => Query;
    aggregates: () => Query;
    facets: () => Query;
    datasets: () => Query;
    dataset: (datasetId: string) => {
        itself: () => Query;
        aggregates: () => Query;
        facets: () => Query;
        records: () => Query;
    };
};
export declare const fromMonitoring: () => {
    itself: () => Query;
    aggregates: () => Query;
    facets: () => Query;
    datasets: () => Query;
    dataset: (datasetId: string) => {
        itself: () => Query;
        aggregates: () => Query;
        facets: () => Query;
        records: () => Query;
    };
};
export declare const fromDataNetwork: () => {
    itself: () => Query;
    aggregates: () => Query;
    facets: () => Query;
    datasets: () => Query;
    dataset: (datasetId: string) => {
        itself: () => Query;
        aggregates: () => Query;
        facets: () => Query;
        records: () => Query;
    };
};
export declare const field: (fieldName: string) => string;
export declare const string: (value: string) => string;
export declare const dateTime: (date: Date) => string;
export declare const date: (date: Date) => string;
export declare const all: (...conditions: string[]) => string;
export declare const one: (...conditions: string[]) => string;
