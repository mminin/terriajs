"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function mergeRecursive(catalogMembers) {
    // Recursively merge a list catalog members to a list of catalog members that is equivalent when loaded with TerriaJS
    var members = [];
    catalogMembers.forEach(function (m) {
        if (m.name === undefined) {
            // Can't match. Push through to catalog converter to report error
            members.push(m);
            return;
        }
        // Find a matching member and merge properties, or add the member m
        // Assuming that a null id doesn't count as an id
        var matchIndex = -1;
        // This should match TerriaJS v7
        matchIndex = members.findIndex(function (m2) {
            return m2.name === m.name &&
                !(m.id !== undefined && m2.id !== undefined && m.id !== m2.id);
        });
        // }
        var existingM = matchIndex >= 0 ? members[matchIndex] : {};
        // Merge m and existingM
        // For a catalog group, concat items and merge properties
        // For anything else just merge properties
        var updatedM = Object.assign({}, existingM, m);
        if (existingM.items != null || m.items != null) {
            updatedM.items = mergeRecursive([].concat(existingM.items || [], m.items || []));
        }
        if (matchIndex >= 0) {
            members[matchIndex] = updatedM;
        }
        else {
            members.push(updatedM);
        }
    });
    return members;
}
exports.default = mergeRecursive;
//# sourceMappingURL=mergeRecursive.js.map