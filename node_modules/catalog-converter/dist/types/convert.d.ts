import { ConversionOptions } from "./ConversionOptions";
import { foldMessage, getInputNotPlainObjectDetails, getMissingRequiredPropDetails, getUnknownPropDetails, getUnknownTypeDetails, Message } from "./Message";
import { CatalogMember, MemberResult } from "./types";
export declare type Converter = (item: CatalogMember, options: ConversionOptions) => MemberResult;
export declare const converters: Map<string, Converter>;
export declare function convertMember(member: unknown, options?: Partial<ConversionOptions>): MemberResult;
export interface CatalogResult {
    result: {
        catalog?: CatalogMember[];
        workbench?: string[];
    } | null;
    messages: Message[];
}
export declare function convertCatalog(json: unknown, options?: Partial<ConversionOptions>): CatalogResult;
export declare type Share = {
    version: string;
    initSources: any[];
};
export declare type ShareResult = {
    result: Share | null;
    messages?: Message[];
    converted?: boolean;
};
export declare type Story = {
    title: string;
    text: string;
    id: string;
    shareData: Share;
};
export declare function convertShare(json: unknown): ShareResult;
export { foldMessage, getInputNotPlainObjectDetails, getMissingRequiredPropDetails, getUnknownPropDetails, getUnknownTypeDetails, };
