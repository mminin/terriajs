import { ConversionOptions } from "../ConversionOptions";
import { Converter } from "../convert";
import { Message, ModelType } from "../Message";
import { CatalogMember, MemberResult, MembersResult, PlainObject } from "../types";
export declare function isNotNull<T>(arg: T | null): arg is T;
export declare function flatMap<X, Y>(l: X[], f: (t: X) => Y[]): Y[];
export declare function nullResult(...messages: Message[]): MemberResult;
export declare function isCatalogMember(m: any, partial?: boolean): m is CatalogMember;
export declare const catalogMemberProps: CopyProps[];
export declare const catalogGroupProps: CopyProps[];
export declare const imageryLayerProps: CopyProps[];
export declare const catalogMemberPropsIgnore: string[];
export declare const catalogGroupPropsIgnore: string[];
export declare function getUnknownProps(o: PlainObject, knownProperties: CopyProps[]): string[];
export declare function propsToWarnings(modelType: ModelType, properties: string[], label: string): Message[];
export declare type CopyProps = string | {
    v7: string;
    v8: string;
    translationFn?: (x: any) => any;
};
export declare function copyProps(source: PlainObject, destination: PlainObject, properties: CopyProps[]): Record<string, unknown>;
export declare const legendProps: string[];
export declare function legends(modelType: ModelType, label: string, source: PlainObject): {
    result: any;
    messages: Message[];
};
export declare function featureInfoTemplate(modelType: ModelType, label: string, template: string | PlainObject): {
    result: Readonly<PlainObject>;
    messages: Message[];
};
export declare function convertMembersArrayWithConvertMember(convertMember: (member: unknown, options?: ConversionOptions) => MemberResult): (members: unknown[], label: string, options: ConversionOptions) => MembersResult;
export declare function itemProperties(item: CatalogMember, converter: Converter, options: ConversionOptions): {
    result: any;
    messages: Message[];
};
export declare function clearEmpties(o: any): void;
