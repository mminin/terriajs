import { Guard, Func } from './types';
export declare type Funcify<T, R> = {
    [P in keyof T]: Func<T[P], R>;
};
export declare type Guardify<T> = {
    [P in keyof T]: Guard<any, T[P]>;
};
export declare function createFold<Types extends any[]>(...guards: Guardify<Types>): {
    <R>(...funcs: Funcify<Types, R>): (s: Types[number]) => R;
    <R_1, S extends Types[number]>(...funcs: Funcify<{ [key in keyof Types]: Extract<Types[key], S>; }, R_1>): (s: S) => R_1;
};
